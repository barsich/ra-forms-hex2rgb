{"version":3,"sources":["components/HexConverter/index.js","App.js","reportWebVitals.js","index.js"],"names":["HexConverter","useState","rgbValue","setRgbValue","className","onChange","target","value","length","rgb","RegExp","exec","result","r","parseInt","g","b","body","document","querySelector","resultRgb","style","backgroundColor","maxLength","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sNAEe,SAASA,IACtB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KA0BA,OACE,sBAAKC,UAAU,YAAf,UACE,uBAAOA,UAAU,gBAAgBC,SA3BhB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,KAAIA,EAAOC,MAAMC,OAAS,GAA1B,CAGA,IACMC,EADQ,IAAIC,OAAO,qDACPC,KAAKL,EAAOC,OACxBK,EAASH,GAAsB,IAAfA,EAAID,OACtB,CACEK,EAAGC,SAASL,EAAI,GAAI,IACpBM,EAAGD,SAASL,EAAI,GAAI,IACpBO,EAAGF,SAASL,EAAI,GAAI,KAEtB,KAEIQ,EAAOC,SAASC,cAAc,QACpC,GAAIP,EAAQ,CACV,IAAMQ,EAAS,cAAUR,EAAOC,EAAjB,aAAuBD,EAAOG,EAA9B,aAAoCH,EAAOI,EAA3C,KACfb,EAAYiB,GACZH,EAAKI,MAAMC,gBAAkBF,OAE7BjB,EAAY,yCACZc,EAAKI,MAAMC,gBAAkB,UAM0BC,UAAU,MACnE,qBAAKnB,UAAU,gBAAf,SAAgCF,OC5BvB,SAASsB,IACtB,OAAO,cAACxB,EAAD,ICLT,IAYeyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BZ,K","file":"static/js/main.e43a9293.chunk.js","sourcesContent":["import { useState } from 'react'\n\nexport default function HexConverter() {\n  const [rgbValue, setRgbValue] = useState('');\n  const handleChange = ({ target }) => {\n    if (target.value.length < 7) {\n      return;\n    }\n    const regex = new RegExp(/^#?([a-fA-F\\d]{2})([a-fA-F\\d]{2})([a-fA-F\\d]{2})$/);\n    const rgb = regex.exec(target.value);\n    const result = rgb && rgb.length === 4\n      ? {\n          r: parseInt(rgb[1], 16),\n          g: parseInt(rgb[2], 16),\n          b: parseInt(rgb[3], 16),\n        }\n      : null;\n\n      const body = document.querySelector('body');\n      if (result) {\n        const resultRgb = `rgb(${result.r}, ${result.g}, ${result.b})`;\n        setRgbValue(resultRgb);\n        body.style.backgroundColor = resultRgb;\n      } else {\n        setRgbValue('Ошибка!');\n        body.style.backgroundColor = 'coral';\n      }\n  };\n\n  return (\n    <div className=\"converter\">\n      <input className=\"hex-container\" onChange={handleChange} maxLength=\"7\"></input>\n      <div className=\"rgb-container\">{rgbValue}</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport HexConverter from './components/HexConverter';\n\nexport default function App() {\n  return <HexConverter />;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}